<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QuShuXian 魅影中国</title>
  
  <subtitle>数据分析师和Ai机器学习领域研究者</subtitle>
  <link href="https://qushuxian.github.io/atom.xml" rel="self"/>
  
  <link href="https://qushuxian.github.io/"/>
  <updated>2021-08-16T02:21:20.000Z</updated>
  <id>https://qushuxian.github.io/</id>
  
  <author>
    <name>曲书贤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python数据清洗之map和reduce函数的使用方法</title>
    <link href="https://qushuxian.github.io/page/guidebook/map_reduce/"/>
    <id>https://qushuxian.github.io/page/guidebook/map_reduce/</id>
    <published>2021-08-16T02:21:20.000Z</published>
    <updated>2021-08-16T02:21:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章主要实现的是使用map对传入的序列中每个元素进行计算，使用reduce对传入的序列中第一个元素进行计算后得到计算结果、再将这个结果对下一个元素进行计算，直至结束。在使用Python数据清洗时，这两个函数可以有效减少代码冗余、提升计算效率等。</p><span id="more"></span><br><br><blockquote><p>本篇文章既然讲Python数据清洗常用的map和reduce函数，那么首先说明下两个函数的不同点，以便有几个简单的印象。</p><p><strong>参数不同</strong></p><ol><li>map接收两个参数，第一个参数是函数，第二个参数是序列(列表)，函数可以接收一个或多个参数。</li><li>reduce接收两个参数，第一个参数是函数，第二个参数是序列(列表)，但函数只能接收两个参数。</li></ol><p><strong>计算逻辑不同</strong></p><p>map()是将传入的函数依次作用到序列的每个元素，每个元素都是独自被函数计算一次；</p><p>reduce()是将传人的函数作用在序列的第一个元素并得到结果后，把这个结果继续与下一个元素作用，直到序列结束；</p><p>下面将通过实际的案例进行说明。</p></blockquote><br><h1 id="map函数的应用场景"><a class="markdownIt-Anchor" href="#map函数的应用场景"></a> map函数的应用场景</h1><p><code>map</code>函数接收两个输入参数，第一个参数是函数(仅接受一个参数)、第二个参数是<code>Iterable</code>，由于<code>Iterator</code>是惰性序列( 惰性是指你不主动去遍历计算它，就不会计算其中元素的值)，因此通过<code>list()</code>函数让它把整个序列都计算出来并返回一个list。</p><p><code>map</code>函数将传入的函数依次计算到传入序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><p><code>map</code>函数在Python数据清洗时迭代计算的对象是列表（也就是说只要数据放到列表中就行，理论上列表里也可以是字典、df、series等等），主要的应用场景包括：</p><ol><li>列表的数学运算</li><li>列表的格式转换</li><li>列表的字符串分割</li></ol><br><h2 id="map函数应用案例"><a class="markdownIt-Anchor" href="#map函数应用案例"></a> map函数应用案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_map</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line">r = <span class="built_in">list</span>(<span class="built_in">map</span>(function_map, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line"><span class="number">996</span> ns ± <span class="number">25.5</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br></pre></td></tr></table></figure><p>上边是对list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]中的每个元素执行了2次方的计算，代码执行时长约996纳秒。</p><p>同时，map的计算过程也可以通过for循环的方式计算，但循环的计算效率将极大地下降，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line">items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">squared = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">    squared.append(i**<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line"><span class="number">3.12</span> µs ± <span class="number">162</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br></pre></td></tr></table></figure><p>上边同样是对list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]中的每个元素执行了2次方的计算，代码执行时长约3.12微秒，1微妙=1000纳秒，也就是说map的计算时间比for循环的计算时间缩短了3倍，map完胜。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_map</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">x1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x2 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s = <span class="built_in">map</span>(function_map, <span class="built_in">zip</span>(x1, x2, x3))</span><br><span class="line"></span><br><span class="line"><span class="number">429</span> ns ± <span class="number">12.3</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br></pre></td></tr></table></figure><p>从计算过程看得出来<code>map</code>作为高阶函数、它事实上把运算规则抽象了、那么也就可以在现实工作中进行复杂的逻辑计算。</p><br><br><h1 id="reduce函数的应用内场景"><a class="markdownIt-Anchor" href="#reduce函数的应用内场景"></a> reduce函数的应用内场景</h1><p><code>reduce</code>函数同样是接收两个输入参数，第一个参数是函数(仅接受两个参数)、第二个参数是<code>Iterable</code>，细心的朋友们可能会发现这两个函数有一个不同点，那就是<strong>第一个参数函数接受的输入参数个数不同，<code>map</code>函数第一个参数是函数只能接受一个参数的输入，而<code>reduce</code>函数第一个参数是函数可以接受两个参数的输入，这在不同程度解决掉了很大计算开销的问题。</strong></p><p><code>reduce</code>函数在迭代序列的过程中，首先把列表中 <strong>前两个元素</strong>（只能两个）传给 <strong>函数</strong>，函数加工后，然后把 <strong>得到的结果和第三个元素</strong> 作为两个参数传给函数参数， 依次类推直至结束。</p><p><code>reduce</code>函数在Python数据清洗时迭代计算的对象是列表（也就是说只要数据放到列表中就行，理论上列表里也可以是字典、df、series等等），主要的应用场景包括：</p><ol><li>多个数据框join</li><li>列表的递推计算</li></ol><h2 id="reduce函数应用案例-多个数据框join"><a class="markdownIt-Anchor" href="#reduce函数应用案例-多个数据框join"></a> reduce函数应用案例-多个数据框join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_reduce</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> pd.merge(x, y, how=<span class="string">&#x27;left&#x27;</span>, on=[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = pd.DataFrame(&#123;<span class="string">&#x27;id&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="string">&#x27;name&#x27;</span>: [<span class="string">&#x27;张一&#x27;</span>, <span class="string">&#x27;张二&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;张四&#x27;</span>, <span class="string">&#x27;张五&#x27;</span>]&#125;)</span><br><span class="line">t2 = pd.DataFrame(&#123;<span class="string">&#x27;id&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="string">&#x27;city&#x27;</span>: [<span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;成都&#x27;</span>, <span class="string">&#x27;重庆&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>]&#125;)</span><br><span class="line">t3 = pd.DataFrame(&#123;<span class="string">&#x27;id&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="string">&#x27;occupation&#x27;</span>: [<span class="string">&#x27;分析师&#x27;</span>, <span class="string">&#x27;工程师&#x27;</span>, <span class="string">&#x27;销售&#x27;</span>, <span class="string">&#x27;HR&#x27;</span>, <span class="string">&#x27;前台&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">tf = reduce(function_reduce, [t1, t2, t3])</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">   <span class="built_in">id</span> name city occupation</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   张一   上海        分析师</span><br><span class="line">    <span class="number">1</span>   <span class="number">2</span>   张二   北京        工程师</span><br><span class="line">    <span class="number">2</span>   <span class="number">3</span>   张三   成都         销售</span><br><span class="line">    <span class="number">3</span>   <span class="number">4</span>   张四   重庆         HR</span><br><span class="line">    <span class="number">4</span>   <span class="number">5</span>   张五   深圳         前台</span><br></pre></td></tr></table></figure><h2 id="reduce函数应用案例-多个数据集中的并集和交集"><a class="markdownIt-Anchor" href="#reduce函数应用案例-多个数据集中的并集和交集"></a> reduce函数应用案例-多个数据集中的并集和交集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_reduce</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; y</span><br><span class="line">sets = [&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">1</span>, <span class="number">5</span>&#125;, &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>&#125;]</span><br><span class="line">s = reduce(function_reduce, sets)</span><br><span class="line"><span class="number">640</span> ns ± <span class="number">29</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%timeit</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_reduce</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x | y</span><br><span class="line">sets = [&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">1</span>, <span class="number">5</span>&#125;, &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>&#125;]</span><br><span class="line">s = reduce(function_reduce, sets)</span><br><span class="line"><span class="number">751</span> ns ± <span class="number">31.6</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000000</span> loops each)</span><br></pre></td></tr></table></figure><h2 id="reduce函数应用案例-转换格式并累积计算"><a class="markdownIt-Anchor" href="#reduce函数应用案例-转换格式并累积计算"></a> reduce函数应用案例-转换格式并累积计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_reduce</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(x) + <span class="built_in">int</span>(y)</span><br><span class="line">ls1 = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">sum</span> = reduce(function_reduce, ls1)</span><br><span class="line"><span class="number">3.62</span> µs ± <span class="number">285</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;文章主要实现的是使用map对传入的序列中每个元素进行计算，使用reduce对传入的序列中第一个元素进行计算后得到计算结果、再将这个结果对下一个元素进行计算，直至结束。在使用Python数据清洗时，这两个函数可以有效减少代码冗余、提升计算效率等。&lt;/p&gt;</summary>
    
    
    
    <category term="python数据清洗" scheme="https://qushuxian.github.io/categories/python%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
    
    <category term="map" scheme="https://qushuxian.github.io/tags/map/"/>
    
    <category term="reduce" scheme="https://qushuxian.github.io/tags/reduce/"/>
    
  </entry>
  
  <entry>
    <title>使用Python自动创建Hexo博客并生成博客缩略图</title>
    <link href="https://qushuxian.github.io/page/guidebook/automatic_create_hexo/"/>
    <id>https://qushuxian.github.io/page/guidebook/automatic_create_hexo/</id>
    <published>2021-08-03T02:35:29.000Z</published>
    <updated>2021-08-03T02:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Python封装hexo博客框架的shell脚本，实现运行Python程序就能自动化创建hexo博客、同时实现随机给出博客使用的缩略图的URL。</p><span id="more"></span><br><h2 id="最终效果展示"><a class="markdownIt-Anchor" href="#最终效果展示"></a> 最终效果展示</h2><ul><li>Python创建脚本效果</li></ul><img src="image-20210803104239281.png" alt="image-20210803104239281" style="zoom:50%;" /><ul><li>创建后生成的文件效果</li></ul><img src="image-20210803104431365.png" alt="image-20210803104431365" style="zoom:50%;" /><ul><li><p><span id='thumbnail_url'>创建后生成的缩略图效果</span></p><p>此处需要注意，你的hexo主题文件要支持博客的缩略的才可以，我当前使用的主题是pure，缩略图需要存放在主题的source文件夹下，如下图。</p></li></ul><img src="image-20210803105347111.png" alt="image-20210803105347111" style="zoom:50%;" /><table><thead><tr><th>md文件头</th><th>效果</th></tr></thead><tbody><tr><td>—<br/>title: 使用Python自动创建Hexo博客并生成博客缩略图<br/>thumbnail_url: /images/default_img/blog-default-4.jpg<br/>date: 2021-08-03 10:35:29<br/>—</td><td><img src="image-20210803113836515.png" alt="image-20210803113836515" style="zoom:50%;" /></td></tr></tbody></table><br><h2 id="python脚本自动创建hexo博客并生成博客缩略图过程"><a class="markdownIt-Anchor" href="#python脚本自动创建hexo博客并生成博客缩略图过程"></a> Python脚本自动创建Hexo博客并生成博客缩略图过程</h2><ol><li><p>首先在项目的根目录下创建main.py文件，当然名字也可以自己定。</p></li><li><p>创建项目目录检查函数，防止main.py不是在根目录下执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处的dev就是项目的根目录名称，需要根据自己的情况进行命名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_mkdir</span>(<span class="params">path=<span class="literal">None</span>, root_name=<span class="string">&#x27;dev&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取项目根目录路径以及根目录下指定path的路径&quot;&quot;&quot;</span></span><br><span class="line">    root = os.path.dirname(__file__)</span><br><span class="line">    <span class="keyword">if</span> root.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] != root_name:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;项目根目录不正确，请检查&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            root_nex = os.path.join(root, path)</span><br><span class="line">            <span class="keyword">return</span> root_nex</span><br></pre></td></tr></table></figure></li><li><p>修改博客默认的缩略图。前边提到的创建博客后会<a href="#thumbnail_url">生成默认的缩略图</a>，但所有的博客都使用同一个缩略图会不太美观，于是就有了针对缩略图自动修改的Python脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_random_blog_images</span>(<span class="params">default_path=<span class="string">&#x27;themes/pure/source/images/default_img&#x27;</span>, prd_path=<span class="string">&#x27;/images/default_img/&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取blog缩略图默认的图片列表并随机选择一个，拼接生成线上使用的URL&quot;&quot;&quot;</span></span><br><span class="line">    mkdir = _mkdir(default_path)</span><br><span class="line">    default_image_list = get_file_path(mkdir)</span><br><span class="line">    default_images = random.choice(default_image_list).split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    image_path = prd_path + default_images</span><br><span class="line">    <span class="keyword">return</span> image_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;thumbnail_url: &#x27;是你在post.md模板文件头中创建的缩略图变量（字段）名称</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_revise_blog_thumbnail_url</span>(<span class="params">blog_path, blog_thumbnail=<span class="string">&#x27;thumbnail_url: &#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建新博客后，输入新博客的路径信息修改默认的缩略图URL&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;     修改博客缩略图URL&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(blog_path) <span class="keyword">as</span> f:</span><br><span class="line">        blog = f.readlines()</span><br><span class="line">        <span class="comment"># 获取博客中默认缩略图的路径，下标</span></span><br><span class="line">        thumbnail_url = [img <span class="keyword">for</span> img <span class="keyword">in</span> blog <span class="keyword">if</span> blog_thumbnail <span class="keyword">in</span> img]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;     创建的博客中使用的缩略图：&#x27;</span>, thumbnail_url[<span class="number">0</span>])</span><br><span class="line">        thumbnail_url_index = blog.index(thumbnail_url[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 获取随机缩略图，替换博客中默认的thumbnail_url</span></span><br><span class="line">        random_blog_images = _random_blog_images() + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        random_blog_images = blog_thumbnail + random_blog_images</span><br><span class="line">        blog[thumbnail_url_index] = random_blog_images</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;     修改后博客中使用的缩略图：&#x27;</span>, random_blog_images)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(blog_path, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> w:</span><br><span class="line">        w.writelines(blog)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;     博客缩略图URL修改成功&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>定义一个交互函数，让运行main.py文件时能够进行输入操作。</p><p><code>下边的&quot;2 编译博客内容并上传到Github仓库&quot;暂且不表，以后有时间再展开讲，计划是实现博客内容中的图片URL替换、搜索引擎的自动提交等等吧</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_code</span>():</span></span><br><span class="line">    types = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    该程序提供如下服务内容：</span></span><br><span class="line"><span class="string">        1 创建新博客</span></span><br><span class="line"><span class="string">        2 编译博客内容并上传到Github仓库</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    请输入需要操作的序号:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(types)</span><br><span class="line">    inputs = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> &lt;= <span class="built_in">int</span>(inputs) &lt;= <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1 创建新博客</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(inputs) == <span class="number">1</span>:</span><br><span class="line">            os.system(<span class="string">&#x27;cd &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(_mkdir()))</span><br><span class="line">            create_blog_name, create_blog_id, create_blog_path = <span class="built_in">input</span>(<span class="string">&#x27;请输入文章标题:&#x27;</span>), <span class="built_in">input</span>(<span class="string">&#x27;请输入文章ID(url使用):&#x27;</span>), <span class="built_in">input</span>(<span class="string">&#x27;请输入文章所属文件夹名称:&#x27;</span>)</span><br><span class="line">            create_blog = create_blog_path + <span class="string">&#x27;/&#x27;</span> + create_blog_id + <span class="string">&#x27; &quot;&#x27;</span> + create_blog_name + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">            revise_url = create_blog_path + <span class="string">&#x27;/&#x27;</span> + create_blog_id</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;将创建博客内容：&#x27;</span>, create_blog)</span><br><span class="line">            create_type = os.system(<span class="string">&#x27;hexo new post --path &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(create_blog))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(create_type) == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;创建成功&#x27;</span>)</span><br><span class="line">                _revise_blog_thumbnail_url(<span class="string">&#x27;source/_posts/&#x27;</span> + revise_url + <span class="string">&#x27;.md&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;创建异常，请检查&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2 编译博客内容并上传到Github仓库</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(inputs) == <span class="number">2</span>:</span><br><span class="line">            _revise_blog_img_url()</span><br><span class="line">            os.system(<span class="string">&#x27;cd &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(_mkdir()))</span><br><span class="line">            <span class="comment"># os.system(&#x27;hexo clean &amp;&amp; hexo deploy&#x27;)</span></span><br><span class="line">            os.system(<span class="string">&#x27;hexo clean&#x27;</span>)</span><br><span class="line">            os.system(<span class="string">&#x27;hexo generate&#x27;</span>)</span><br><span class="line">            os.system(<span class="string">&#x27;cp -rf ../README.md public/&#x27;</span>)</span><br><span class="line">            os.system(<span class="string">&#x27;hexo deploy&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入错误，请输入(1-2)序号中需要操作的数字&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>OK，使用Python自动创建Hexo博客并生成博客缩略图的完整内容就这些，非常简单且容易上手。</p><p>完整的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author : 曲书贤</span></span><br><span class="line"><span class="comment"># @File : main.py</span></span><br><span class="line"><span class="comment"># @CreateTime : 2021/7/07 15:50</span></span><br><span class="line"><span class="comment"># @Software : PyCharm</span></span><br><span class="line"><span class="comment"># @Comment : hexo创建、渲染和发布博客自动化脚本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> util.get <span class="keyword">import</span> get_file_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_mkdir</span>(<span class="params">path=<span class="literal">None</span>, root_name=<span class="string">&#x27;dev&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取项目根目录路径以及根目录下指定path的路径&quot;&quot;&quot;</span></span><br><span class="line">    root = os.path.dirname(__file__)</span><br><span class="line">    <span class="keyword">if</span> root.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] != root_name:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;项目根目录不正确，请检查&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            root_nex = os.path.join(root, path)</span><br><span class="line">            <span class="keyword">return</span> root_nex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_random_blog_images</span>(<span class="params">default_path=<span class="string">&#x27;themes/pure/source/images/default_img&#x27;</span>, prd_path=<span class="string">&#x27;/images/default_img/&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取blog缩略图默认的图片列表并随机选择一个，拼接生成线上使用的URL&quot;&quot;&quot;</span></span><br><span class="line">    mkdir = _mkdir(default_path)</span><br><span class="line">    default_image_list = get_file_path(mkdir)</span><br><span class="line">    default_images = random.choice(default_image_list).split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    image_path = prd_path + default_images</span><br><span class="line">    <span class="keyword">return</span> image_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_revise_blog_thumbnail_url</span>(<span class="params">blog_path, blog_thumbnail=<span class="string">&#x27;thumbnail_url: &#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建新博客后，修改默认的缩略图URL&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;     修改博客缩略图URL&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(blog_path) <span class="keyword">as</span> f:</span><br><span class="line">        blog = f.readlines()</span><br><span class="line">        <span class="comment"># 获取博客中默认缩略图的路径，下标</span></span><br><span class="line">        thumbnail_url = [img <span class="keyword">for</span> img <span class="keyword">in</span> blog <span class="keyword">if</span> blog_thumbnail <span class="keyword">in</span> img]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;     创建的博客中使用的缩略图：&#x27;</span>, thumbnail_url[<span class="number">0</span>])</span><br><span class="line">        thumbnail_url_index = blog.index(thumbnail_url[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 获取随机缩略图，替换博客中默认的thumbnail_url</span></span><br><span class="line">        random_blog_images = _random_blog_images() + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        random_blog_images = blog_thumbnail + random_blog_images</span><br><span class="line">        blog[thumbnail_url_index] = random_blog_images</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;     修改后博客中使用的缩略图：&#x27;</span>, random_blog_images)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(blog_path, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> w:</span><br><span class="line">        w.writelines(blog)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;     博客缩略图URL修改成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_code</span>():</span></span><br><span class="line">    types = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    该程序提供如下服务内容：</span></span><br><span class="line"><span class="string">        1 创建新博客</span></span><br><span class="line"><span class="string">        2 编译博客内容并上传到Github仓库</span></span><br><span class="line"><span class="string">    \n</span></span><br><span class="line"><span class="string">    请输入需要操作的序号:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(types)</span><br><span class="line">    inputs = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> &lt;= <span class="built_in">int</span>(inputs) &lt;= <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1 创建新博客</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(inputs) == <span class="number">1</span>:</span><br><span class="line">            os.system(<span class="string">&#x27;cd &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(_mkdir()))</span><br><span class="line">            create_blog_name, create_blog_id, create_blog_path = <span class="built_in">input</span>(<span class="string">&#x27;请输入文章标题:&#x27;</span>), <span class="built_in">input</span>(<span class="string">&#x27;请输入文章ID(url使用):&#x27;</span>), <span class="built_in">input</span>(<span class="string">&#x27;请输入文章所属文件夹名称:&#x27;</span>)</span><br><span class="line">            create_blog = create_blog_path + <span class="string">&#x27;/&#x27;</span> + create_blog_id + <span class="string">&#x27; &quot;&#x27;</span> + create_blog_name + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">            revise_url = create_blog_path + <span class="string">&#x27;/&#x27;</span> + create_blog_id</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;将创建博客内容：&#x27;</span>, create_blog)</span><br><span class="line">            create_type = os.system(<span class="string">&#x27;hexo new post --path &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(create_blog))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(create_type) == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;创建成功&#x27;</span>)</span><br><span class="line">                _revise_blog_thumbnail_url(<span class="string">&#x27;source/_posts/&#x27;</span> + revise_url + <span class="string">&#x27;.md&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;创建异常，请检查&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2 编译博客内容并上传到Github仓库</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(inputs) == <span class="number">2</span>:</span><br><span class="line">            _revise_blog_img_url()</span><br><span class="line">            os.system(<span class="string">&#x27;cd &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(_mkdir()))</span><br><span class="line">            <span class="comment"># os.system(&#x27;hexo clean &amp;&amp; hexo deploy&#x27;)</span></span><br><span class="line">            os.system(<span class="string">&#x27;hexo clean&#x27;</span>)</span><br><span class="line">            os.system(<span class="string">&#x27;hexo generate&#x27;</span>)</span><br><span class="line">            os.system(<span class="string">&#x27;cp -rf ../README.md public/&#x27;</span>)</span><br><span class="line">            os.system(<span class="string">&#x27;hexo deploy&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入错误，请输入(1-2)序号中需要操作的数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run_code()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如有问题，欢迎留言~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用Python封装hexo博客框架的shell脚本，实现运行Python程序就能自动化创建hexo博客、同时实现随机给出博客使用的缩略图的URL。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo系列" scheme="https://qushuxian.github.io/categories/Hexo%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="python自动化创建博客" scheme="https://qushuxian.github.io/tags/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Git删除本地提交记录和GitHub忽略文件设置</title>
    <link href="https://qushuxian.github.io/page/guidebook/git/"/>
    <id>https://qushuxian.github.io/page/guidebook/git/</id>
    <published>2021-07-30T03:30:44.000Z</published>
    <updated>2021-08-02T03:30:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>git</code>操作删除一些本地错误提交的记录，.gitignore忽略文件未生效的解决方案。</p><span id="more"></span><br><h2 id="查看git提交记录"><a class="markdownIt-Anchor" href="#查看git提交记录"></a> 查看Git提交记录</h2><p><strong><code>git log --oneline</code></strong></p><p>该命令为查看git提交记录的精简版信息</p><img src="image-20210730114259071.png" alt="image-20210730114259071" style="zoom:50%;"/><p>如果想查看git提交记录的全部信息，请输入  <strong><code>git log</code></strong></p><img src="image-20210730114935435.png" alt="image-20210730114935435" style="zoom:67%;"/><br><h2 id="删除git提交到本地最后一条记录"><a class="markdownIt-Anchor" href="#删除git提交到本地最后一条记录"></a> 删除Git提交到本地最后一条记录</h2><p><strong><code>git reset --hard HEAD~1</code></strong></p><p>若想要删除最后提交的n记录，将 1 替换为一个具体的数字 n 即可。</p><br><h2 id="gitignore忽略文件未生效"><a class="markdownIt-Anchor" href="#gitignore忽略文件未生效"></a> .gitignore忽略文件未生效</h2><p>在项目开发过程中，把特定目录或文件加入.gitignore忽略规则，但提交代码是发现忽略规则并未生效，究其原因是.gitignore只能忽略那些原来没有被跟踪的文件，你在项目开发过程中加入忽略规则的某些文件本身已经被纳入了版本管理中，则修改.gitignore是无效的。</p><p>那么解决这种问题的方法就是先把本地Git缓存删除，然后再提交：</p><p><strong><code>git rm -r --cached .</code></strong></p><p><strong><code>git add .</code></strong></p><p><strong><code>git commit -m 'update .gitignore'</code></strong></p><p>切记，.gitignore文件必须是在项目的根目录下，否则不会生效。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用&lt;code&gt;git&lt;/code&gt;操作删除一些本地错误提交的记录，.gitignore忽略文件未生效的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="https://qushuxian.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://qushuxian.github.io/tags/git/"/>
    
    <category term=".gitignore" scheme="https://qushuxian.github.io/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用指南</title>
    <link href="https://qushuxian.github.io/page/guidebook/hexo/"/>
    <id>https://qushuxian.github.io/page/guidebook/hexo/</id>
    <published>2021-07-20T07:25:15.000Z</published>
    <updated>2021-07-20T07:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>该文章主要包含：</p><ul><li>hexo常用shell命令</li><li>用Python包装常用shell命令</li><li>Python实现hexo博客随机缩略图</li><li>Python实现hexo博客图片url的自动修改</li><li>Python实现hexo博客自动编译并发布</li></ul><span id="more"></span><br><h3 id="创建新的文档根目录下"><a class="markdownIt-Anchor" href="#创建新的文档根目录下"></a> 创建新的文档（根目录下）</h3><p>在根目录中执行下列shell命令，表示根据scaffolds中的post模板在source/_posts下创建guidebook/hexo文件夹、同时创建同名的md文档，文档内部指定文章的标题为Hexo使用指南</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post --path guidebook/hexo &quot;Hexo使用指南&quot;</span><br></pre></td></tr></table></figure><br><br><h3 id="编译md文档"><a class="markdownIt-Anchor" href="#编译md文档"></a> 编译md文档</h3><p>运行如下命令渲染并编译开发环境中的md文档 → 生成html → 推送到代码仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><br><br><h3 id="创建hexo项目"><a class="markdownIt-Anchor" href="#创建hexo项目"></a> 创建hexo项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建hexo项目并命名为blog</span></span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br></pre></td></tr></table></figure><p>创建blog项目后，将生成如下文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml # 配置文件</span><br><span class="line">├── db.json</span><br><span class="line">├── node_modules # 开发环境node依赖</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json # hexo运行指令和依赖的npm</span><br><span class="line">├── scaffolds # 模板文件</span><br><span class="line">├── source # md文档存储文件，渲染时会根据该文件下的文件路径和文件名称生成URL，避免使用中文</span><br><span class="line">└── themes # 主题配置</span><br></pre></td></tr></table></figure><p>为了编译后自动推送到GitHub仓库，需要安装hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><br><br><h3 id="主题设置"><a class="markdownIt-Anchor" href="#主题设置"></a> 主题设置</h3><h4 id="yilia-plus"><a class="markdownIt-Anchor" href="#yilia-plus"></a> yilia-plus</h4><p><img src="image-20210720190956478.png" alt="image-20210720190956478" /></p><br><h4 id="pure"><a class="markdownIt-Anchor" href="#pure"></a> pure</h4><p><img src="image-20210720191518575.png" alt="image-20210720191518575" /></p><ol><li><p>该主题支持颜色 theme-black，theme-blue，theme-green，theme-purple</p></li><li><p>使用该主题，需要将themes/pure/_source下的所有文件拷贝至根目录下的themes文件夹，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">── source</span><br><span class="line">   ├── 404</span><br><span class="line">   ├── _data</span><br><span class="line">   ├── _posts</span><br><span class="line">   ├── about</span><br><span class="line">   ├── books</span><br><span class="line">   ├── categories</span><br><span class="line">   ├── links</span><br><span class="line">   ├── repository</span><br><span class="line">   └── tags</span><br></pre></td></tr></table></figure></li><li><p>该主题的详细配置可以再themes/pure/_config.yml进行</p></li></ol><br><br>]]></content>
    
    
    <summary type="html">&lt;p&gt;该文章主要包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo常用shell命令&lt;/li&gt;
&lt;li&gt;用Python包装常用shell命令&lt;/li&gt;
&lt;li&gt;Python实现hexo博客随机缩略图&lt;/li&gt;
&lt;li&gt;Python实现hexo博客图片url的自动修改&lt;/li&gt;
&lt;li&gt;Python实现hexo博客自动编译并发布&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Hexo系列" scheme="https://qushuxian.github.io/categories/Hexo%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hexo" scheme="https://qushuxian.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
